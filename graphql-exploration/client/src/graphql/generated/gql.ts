/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query UserSelect_Users {\n    users {\n      id\n      username\n    }\n  }\n": types.UserSelect_UsersDocument,
    "\n  query CreatePostForm_CurrentUser {\n    currentUser {\n      id\n      username\n    }\n  }\n": types.CreatePostForm_CurrentUserDocument,
    "\n  mutation CreatePostForm_CreatePost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n": types.CreatePostForm_CreatePostDocument,
    "\n  mutation PostItem_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n": types.PostItem_LikePostDocument,
    "\n  query HomePage_Posts($limit: Int!, $cursor: String) {\n    posts(limit: $limit, cursor: $cursor) {\n      nextCursor\n      nodes {\n        id\n        title\n        body\n        author {\n          id\n          username\n        }\n        likes(limit: 0) {\n          count\n        }\n        comments(limit: 0) {\n          count\n        }\n        isLiked\n      }\n    }\n  }\n": types.HomePage_PostsDocument,
    "\n  query CommentList_Post($id: ID!) {\n    post(id: $id) {\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n": types.CommentList_PostDocument,
    "\n  query PostPage_Post($id: ID!) {\n    post(id: $id) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n": types.PostPage_PostDocument,
    "\n  mutation PostPage_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n": types.PostPage_LikePostDocument,
};

export function graphql(source: "\n  query UserSelect_Users {\n    users {\n      id\n      username\n    }\n  }\n"): (typeof documents)["\n  query UserSelect_Users {\n    users {\n      id\n      username\n    }\n  }\n"];
export function graphql(source: "\n  query CreatePostForm_CurrentUser {\n    currentUser {\n      id\n      username\n    }\n  }\n"): (typeof documents)["\n  query CreatePostForm_CurrentUser {\n    currentUser {\n      id\n      username\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreatePostForm_CreatePost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePostForm_CreatePost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"];
export function graphql(source: "\n  mutation PostItem_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"): (typeof documents)["\n  mutation PostItem_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"];
export function graphql(source: "\n  query HomePage_Posts($limit: Int!, $cursor: String) {\n    posts(limit: $limit, cursor: $cursor) {\n      nextCursor\n      nodes {\n        id\n        title\n        body\n        author {\n          id\n          username\n        }\n        likes(limit: 0) {\n          count\n        }\n        comments(limit: 0) {\n          count\n        }\n        isLiked\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomePage_Posts($limit: Int!, $cursor: String) {\n    posts(limit: $limit, cursor: $cursor) {\n      nextCursor\n      nodes {\n        id\n        title\n        body\n        author {\n          id\n          username\n        }\n        likes(limit: 0) {\n          count\n        }\n        comments(limit: 0) {\n          count\n        }\n        isLiked\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query CommentList_Post($id: ID!) {\n    post(id: $id) {\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentList_Post($id: ID!) {\n    post(id: $id) {\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query PostPage_Post($id: ID!) {\n    post(id: $id) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostPage_Post($id: ID!) {\n    post(id: $id) {\n      id\n      title\n      body\n      author {\n        id\n        username\n      }\n      likes(limit: 0) {\n        count\n      }\n      comments(limit: 1) {\n        count\n        nextCursor\n        nodes {\n          id\n          body\n          likes(limit: 0) {\n            count\n          }\n          author {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation PostPage_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"): (typeof documents)["\n  mutation PostPage_LikePost($input: LikePostInput!) {\n    likePost(input: $input) {\n      id\n      likes(limit: 0) {\n        count\n      }\n      isLiked\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;